// Aquarium Companion App// Written for CS160 Fall 2016// Team 13: Magnetic Magikarpsvar deviceURL = "";

//Textureslet fishTexture = new Texture("assets/img.png");
let upArrowTexture = new Texture("assets/up-arrow.png");let upInvertedTexture = new Texture("assets/up-arrow-invert.png");
let downArrowTexture =  new Texture("assets/down-arrow.png");let downInvertedTexture = new Texture("assets/down-arrow-invert.png");// Skinslet whiteSkin = new Skin({ fill:"white", texture: fishTexture, fill: "white", width: 1000, height: 1000 });let blueSkin = new Skin({ fill: "#14a5ff" });let transparentSkin = new Skin({ fill: "transparent" });// Styleslet titleStyle = new Style( { font: "30px Marker Felt", color:"white" } );let buttonStyle = new Style({font: '18px', color: 'white'});let boldTextStyle = new Style({font: 'bold 20px', color: "gray"});let textStyle = new Style({font: '20px', color: "gray"});let greenStyle = new Style({font: '20px', color: 'green'});let redStyle = new Style({font: '20px', color: 'red'});let valueStyle = new Style({font: '45px', color: 'black'});// Variables

let last_fed_date = "Sunday, October 9"let last_fed_time = "9:42 AM"
let feedAmount = 5.0


let upArrowSkin = new Skin({	  width: 100, height: 100,      texture: upArrowTexture,      fill: "white",      aspect: "fit"});let upInvertedSkin = new Skin({	  width: 100, height: 100,      texture: upInvertedTexture,      fill: "white",      aspect: "fit"});let downArrowSkin = new Skin({	  width: 100, height: 100,      texture: downArrowTexture,      fill: "white",      aspect: "fit"});let downInvertedSkin = new Skin({	  width: 100, height: 100,      texture: downInvertedTexture,      fill: "white",      aspect: "fit"});

let feedAmountLabel = Label.template($ => ({ left: 30, bottom: 40, width: 80, string : feedAmount + " g", style : valueStyle,  	Behavior: class extends Behavior {  	   	onIncFeed(feedAmountLabel) {  	   		feedAmount ++;  	   		feedAmountLabel.string = feedAmount + " g";		}  	   	onDecFeed(feedAmountLabel) {  	   		feedAmount --;  	   		feedAmountLabel.string = feedAmount + " g";		}  	}}))

let upButton = Container.template($ => ({  width:50, height:50,  active: true,  skin: upArrowSkin,  Behavior: class extends Behavior {  	onCreate(button, data) {  		this.command = data.command;  	}  	onTouchEnded(button){  	   	button.skin = upArrowSkin;   		application.distribute(this.command);     }   	onTouchBegan(button) {  	   	button.skin = upInvertedSkin;	}  }}))let downButton = Container.template($ => ({  width:50, height:50, left:2, right:2,  active: true,  skin: downArrowSkin,  Behavior: class extends Behavior {  	onCreate(button, data) {  		this.command = data.command;  	}  	onTouchEnded(button){  	   	button.skin = downArrowSkin;  	   	application.distribute(this.command);     }   	onTouchBegan(button) {  	   	button.skin = downInvertedSkin;	}  }}))
export var feed_screen_template = Column.template($ => ({   left: 0, right: 0, top: 0, bottom: 0,   skin: whiteSkin,   contents: [       new Container({			left:0, right:0, height: 40, skin: blueSkin,			contents: [				new Container({					left: 0, right: 240, skin: blueSkin, active: true,					contents: [						new Picture({left:-80, height: 30, url: "assets/back_button.png"})					],					behavior: Behavior ({						onTouchEnded: function(content, id, x, y, ticks) {							application.distribute("onBack");						}					})				}),				new Label({ string: 'Feed', style: titleStyle })			]		}),		// Contents of the food screen		new Picture({ top: 10, height: 200, url:"assets/food_history_graph.png"}),		new Label({ top: 5, string: 'Last Fed', style: boldTextStyle }),				new Label({ top: 10, string: '18 hours ago', style: redStyle,		 	behavior: Behavior ({		 		setFoodData(container, foodStatus) {		 			if (foodStatus == "Yes") {		 				container.style = greenStyle;		 				container.string = "Just Now";		 			} else {		 				container.style = redStyle;		 				container.string = "17 hours ago";		 			}				} 			})		}),				//new Label({ top: 5, string: last_fed_date, style: textStyle }),		//new Label({ string: last_fed_time, style: textStyle }),
		new Line( {			top:10,			contents: [				new feedAmountLabel(),				new Column({					left: 30,					contents: [						new upButton({command: "onIncFeed"}),						new downButton({command: "onDecFeed"})					]   				}),   			]   		}),					new Container({			name: 'filterButton',			top: 5, height: 50, width: 100, skin: transparentSkin,			contents: [					new Picture({height:50,url:"assets/feed_button.png", active:true, 					behavior: Behavior({						onTouchBegan(picture) {							picture.url = "assets/feed_button_pressed.png";						},						onTouchEnded(picture) {							picture.url = "assets/feed_button.png";							application.distribute("feed");						}					})				})			],		}),   ]}));