// Aquarium Companion App// Written for CS160 Fall 2016// Team 13: Magnetic Magikarpsimport { feed_screen_template } from "feed_screen";import { data_screen_template } from "data_screen";import { tank_screen_template } from "tank_screen";import { temperature_screen_template } from "temperature_screen";import { oxygen_screen_template } from "oxygen_screen";import { pH_screen_template } from "pH_screen";import { data_edit_screen_template } from "data_edit_screen";import { schedule_screen_template } from "schedule_screen";
import { schedule_edit_screen_template } from "schedule_edit_screen";//Textureslet sliderOnTexture = new Texture("assets/slider_general_on.png");let sliderOffTexture = new Texture("assets/slider_general_off.png");let fishTexture = new Texture("assets/img.png");// Skinslet whiteSkin = new Skin({ fill:"white", texture: fishTexture, fill: "white", aspect: "fill", width: 1000, height: 2000, });
let whiteSkinNoFish = new Skin({ fill:"white", texture: fishTexture, fill: "white",  width: 1000, height: 1000, });let blueSkin = new Skin({ fill: "#14a5ff" });
let introBlueSkin = new Skin({fill: "#61C0DF"});let orangeSkin = new Skin({fill: "#FF9105"});let transparentSkin = new Skin({ fill: "transparent" });let sliderOnSkin = new Skin({	  width: 208, height: 106,      texture: sliderOnTexture,      fill: "white",      aspect: "fit"});	let sliderOffSkin = new Skin({	  width: 208, height: 106,      texture: sliderOffTexture,      fill: "white",      aspect: "fit"});// Styleslet titleStyle = new Style( { font: "35px Porky's", color:"white" } );
let titleStyleSetting = new Style( { font: "35px Marker Felt", color:"white" } );let titleStyleBlack = new Style( { font: "30px Roboto", color:"black" } );let buttonStyle = new Style({font: "18px Roboto", color: 'white'});let buttonStyleBlack = new Style({font: "18px Roboto", color: 'black'});// Variableslet deviceURL = "";let filterStatus = "No";let foodStatus = "No";let loVal = 72;let hiVal = 80;let actVal = 75.9;// Main screen navigation buttonsvar tankPicture = new Picture({ top: 30, height: 133, url: 'assets/tank_pic_1.png'});let tankPicTemplate = Container.template($ => ({	contents:[		tankPicture	],	behavior: Behavior ({		onCreate: function(container, data) {			this.count = this.startCount =  99999;			container.interval = 1000;            container.duration = 99999*1000;				},        onDisplayed: function(container, data) {            container.start();        },        onTimeChanged: function(container) {        	trace("count is " + this.count + "\n");        	this.count -= 1;        	let modded = this.count%5;		 	if (modded == 0) {		 		tankPicture.url = 'assets/tank_pic_1.png';		 	} else if (modded == 1){		 		tankPicture.url = 'assets/tank_pic_2.png'; 			 	} else if (modded == 2){		 		tankPicture.url = 'assets/tank_pic_3.png'; 			 	} else if (modded == 3){		 		tankPicture.url = 'assets/tank_pic_4.png'; 			 	} else if (modded == 4){		 		tankPicture.url = 'assets/tank_pic_5.png'; 			 	}        }	})}))

export var tankPic1 = new tankPicTemplate();let slider = Container.template($ => ({	top: 20, left: $.left, width: 200, height: 40,	active: true,	skin: sliderOffSkin,  	Behavior: class extends Behavior {  	   	onTouchBegan(slider) {  	   		if (slider.skin == sliderOnSkin) {	  	   		slider.skin = sliderOffSkin;	  	   	} else {	  	   		slider.skin = sliderOnSkin;	  	   	}		}  	}}))let save_button = Container.template($ => ({	top: 15, height: 47 , width: 150, skin: transparentSkin,	contents: [		new Picture({height:47,url:"assets/save.png", active:true, 			behavior: Behavior({				onTouchBegan(picture) {					picture.url = "assets/save_indented.png";				},				onTouchEnded(picture) {					picture.url = "assets/save.png";					application.remove(application.last);				}			})		})	],}))let feed_button = new Container({	top: 15, height: 50, width: 100, skin: transparentSkin,	contents: [		new Picture({height:50,url:"assets/feed_button_red.png", active:true, 			behavior: Behavior({				onCreate(picture) {					if (foodStatus == "No") {		 				picture.url = "assets/feed_button_red.png";		 			} else {		 				picture.url = "assets/feed_button.png";		 			}				},				onTouchBegan(picture) {					if (foodStatus == "No") {		 				picture.url = "assets/feed_button_pressed_red.png";		 			} else {		 				picture.url = "assets/feed_button_pressed.png";		 			}				},				onTouchEnded(picture) {					if (foodStatus == "No") {		 				picture.url = "assets/feed_button_red.png";		 			} else {		 				picture.url = "assets/feed_button.png";		 			}					application.distribute("onFeedOpen"); 				},			})		})	],});let tank_button = new Container({	top: 8, height: 50, width: 100, skin: transparentSkin,	contents: [		new Picture({height:50,url:"assets/filter_button_red.png", active:true, 			behavior: Behavior({				onCreate(picture) {					if (filterStatus == "No") {		 				picture.url = "assets/filter_button_red.png";		 			} else {		 				picture.url = "assets/filter_button.png";		 			}				},				onTouchBegan(picture) {					if (filterStatus == "No") {		 				picture.url = "assets/filter_button_pressed_red.png";		 			} else {		 				picture.url = "assets/filter_button_pressed.png";		 			}				},				onTouchEnded(picture) {					if (filterStatus == "No") {		 				picture.url = "assets/filter_button_red.png";		 			} else {		 				picture.url = "assets/filter_button.png";		 			}					application.distribute("onTankOpen"); 				},			})		})	]});let data_button = new Container({	top: 8, height: 50, width: 100, skin: transparentSkin,	contents: [		new Picture({height:50,url:"assets/tank_button.png", active:true, 			behavior: Behavior({				onTouchBegan(picture) {					picture.url = "assets/tank_button_pressed.png";				},				onTouchEnded(picture) {					picture.url = "assets/tank_button.png";					application.distribute("onDataOpen"); 				}			})		})	]});let schedule_button = new Container({	top: 8, height: 50, width: 100, skin: transparentSkin,	contents: [new Label({ string: 'Schedule', style: buttonStyle })],	contents: [		new Picture({height: 50,url:"assets/schedule_button.png", active:true, 			behavior: Behavior({				onTouchBegan(picture) {					picture.url = "assets/schedule_button_pressed.png";				},				onTouchEnded(picture) {					picture.url = "assets/schedule_button.png";					application.distribute("onScheduleOpen"); 				}			})		})	]}); let settingScreen = Column.template($ => ({	top: 0, width: 500, height:500,	active: true,	skin: whiteSkinNoFish,	contents: [          new Container({			left:0, right:0, height: 40, skin: blueSkin,			contents: [				new Container({					left: 0, right: 220, top: 0, bottom: 0, skin: blueSkin, active: true,					contents: [						new Label({ string: 'Cancel', style: buttonStyle,						})										],					behavior: Behavior ({						onTouchEnded: function(content, id, x, y, ticks) {							application.remove(application.last);						}					})				}),				new Label({ string: 'Settings', style: titleStyleSetting })			]		}),			new Line({ top: 50,			contents: [				new Label({ left: 80, string: 'Dropcam Light', style: buttonStyleBlack }),				new slider({left: 45})				]		}),		new Line({ top: 20,			contents: [				new Label({left: 80, string: 'Aquarium Light', style: buttonStyleBlack }),				new slider({left: 40})				]		}),		new Line({ top: 20,			contents: [				new Label({left: 80, string: 'Sync Daily', style:buttonStyleBlack }),				new slider({left: 70})				]		}),		new Container({ top: 50,			contents:[				new save_button()	 				]		})  	],}))// Main screen definitionlet main_screen = new Column({	left: 0, right: 0, top: 0, bottom: 0, skin: whiteSkin,	contents: [		new Container({			left: 0, right: 0, height: 40, skin: blueSkin,			contents: [				new Label({ string: 'iQuarium', style: titleStyle }),				new Container({					left: 250, right: 0, top: 0, bottom: 0, skin: blueSkin, active: true,					contents: [						new Picture({ height: 40, url: "assets/gearWhite.png"})					],					behavior: Behavior ({						onTouchEnded: function(content, id, x, y, ticks) {							trace("setting launched \n");							application.add(new settingScreen());						}					})				}),			]		}),		tankPic1,		feed_button,		tank_button,		data_button,		schedule_button	]});
// Handlers for connectionHandler.bind("/discover", Behavior({    onInvoke: function(handler, message){        deviceURL = JSON.parse(message.requestText).url;    }}));Handler.bind("/forget", Behavior({    onInvoke: function(handler, message){        deviceURL = "";    }}));
Handler.bind("/filterManuallyBad", Behavior({    onInvoke: function(handler, message){
    	tank_button.first.url = "assets/filter_button_red.png";        message.responseText = "filter status manually changed to bad!";        message.status = 200;        application.distribute("onUpdate");    }}));
Handler.bind("/filterManuallyGood", Behavior({    onInvoke: function(handler, message){
    	tank_button.first.url = "assets/filter_button.png";        message.responseText = "filter status manually changed to good!";        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/foodManuallyBad", Behavior({    onInvoke: function(handler, message){
        feed_button.first.url = "assets/feed_button_red.png";        message.responseText = "food status manually changed to bad!";        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/foodManuallyGood", Behavior({    onInvoke: function(handler, message){
    	feed_button.first.url = "assets/feed_button.png";        message.responseText = "food status manually changed to good!";        message.status = 200;        application.distribute("onUpdate");    }}));var current_screen = main_screen;// Application behavior definitionvar ApplicationBehavior = Behavior.template({	onLaunch: function() {
		application.shared = true;		application.discover("aquarium.device.app");
        application.add(current_screen);  
   	},    onQuit: function(application) {
    	application.shared = false;        application.forget("aquarium.device.app");    },    onFeedOpen: function() {    	application.remove(current_screen);    	current_screen = new feed_screen_template();		application.add(current_screen);		application.distribute("getFoodData");	},	onTankOpen: function() {    	application.remove(current_screen);    	current_screen = new tank_screen_template();		application.add(current_screen);		application.distribute("getTankData");	},	onDataOpen: function() {    	application.remove(current_screen);    	current_screen = new data_screen_template();		application.add(current_screen);	},	onTemperatureOpen: function() {    	application.remove(current_screen);    	current_screen = new temperature_screen_template();		application.add(current_screen);		},	onOxygenOpen: function() {    	application.remove(current_screen);    	current_screen = new oxygen_screen_template();		application.add(current_screen);		},	onPHopen: function() {    	application.remove(current_screen);    	current_screen = new pH_screen_template();		application.add(current_screen);		},	onScheduleOpen: function() {    	application.remove(current_screen);    	current_screen = new schedule_screen_template();		application.add(current_screen);	},	onBack: function() {		application.remove(current_screen);		current_screen = main_screen;		application.add(current_screen);	},	onDataEditOpen: function() {    	application.remove(current_screen);    	current_screen = new data_edit_screen_template(); 			application.add(current_screen);	},	onBackData: function() {		application.remove(current_screen);		current_screen = new data_screen_template();		application.add(current_screen);	},
	onScheduleEditOpen: function() {    	application.remove(current_screen);    	current_screen = new schedule_edit_screen_template(); 			application.add(current_screen);	},	onBackSchedule: function() {		application.remove(current_screen);		current_screen = new schedule_screen_template();		application.add(current_screen);	},	// All function utility events	getTankData: function() {		if (deviceURL != "") new Message(deviceURL + "getTankData").invoke(Message.JSON).then(json => {			filterStatus = json.count;			application.distribute("setTankData", filterStatus);		});	},	changeFilter: function() {		if (deviceURL != "") new Message(deviceURL + "changeFilter").invoke(Message.JSON).then(json => {			filterStatus = json.count;			application.distribute("setTankData", filterStatus);
			tank_button.first.url = "assets/filter_button.png";					});	},	getFoodData: function() {		if (deviceURL != "") new Message(deviceURL + "getFoodData").invoke(Message.JSON).then(json => {			foodStatus = json.count;			application.distribute("setFoodData", foodStatus);		});	},	feed: function() {		if (deviceURL != "") new Message(deviceURL + "feed").invoke(Message.JSON).then(json => {			foodStatus = json.count;			application.distribute("setFoodData", foodStatus);
			feed_button.first.url = "assets/feed_button.png";		});	},	onSwitchUnits: function() {		if (deviceURL != "") new Message(deviceURL + "switchUnits").invoke(Message.JSON).then(json => {});	},
	onIncFeed: function() {		if (deviceURL != "") new Message(deviceURL + "incFeed").invoke(Message.JSON).then(json => {});	},	onDecFeed: function() {		if (deviceURL != "") new Message(deviceURL + "decFeed").invoke(Message.JSON).then(json => {});	},		onIncLo: function() {		if (deviceURL != "") new Message(deviceURL + "incLo").invoke(Message.JSON).then(json => {});	},	onDecLo: function() {		if (deviceURL != "") new Message(deviceURL + "decLo").invoke(Message.JSON).then(json => {});	},	onIncHi: function() {		if (deviceURL != "") new Message(deviceURL + "incHi").invoke(Message.JSON).then(json => {});	},	onDecHi: function() {		if (deviceURL != "") new Message(deviceURL + "decHi").invoke(Message.JSON).then(json => {});	},	onIncAct: function() {		if (deviceURL != "") new Message(deviceURL + "incAct").invoke(Message.JSON).then(json => {});	},	onDecAct: function() {		if (deviceURL != "") new Message(deviceURL + "decAct").invoke(Message.JSON).then(json => {});	},	onDataSave: function() {		if (deviceURL != "") new Message(deviceURL + "dataSave").invoke(Message.JSON).then(json => {});	},	onDataCancel: function() {		if (deviceURL != "") new Message(deviceURL + "dataCancel").invoke(Message.JSON).then(json => {});		application.remove(current_screen);		current_screen = new data_screen_template();		application.add(current_screen);	},});application.behavior = new ApplicationBehavior();