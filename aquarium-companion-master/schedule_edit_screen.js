// Aquarium Companion App// Written for CS160 Fall 2016// Team 13: Magnetic Magikarps//State Variablesexport var time_1 = 8;export var time_2 = 12;export var time_3 = 7;export var food_1 = "4";export var food_2 = "5";export var food_3 = "7";export var timeUnit1 = "PM";export var timeUnit2 = "PM";export var timeUnit3 = "PM";var oldtime_1 = time_1;var oldtime_2 = time_2;var oldtime_3 = time_3;var oldfood_1 = food_1;var oldfood_2 = food_2;var oldfood_3 = food_3;var oldtimeUnit1 = timeUnit1;var oldtimeUnit2 = timeUnit2;var oldtimeUnit3 = timeUnit3;var saved = 0;//Textureslet editButtonTexture = new Texture("assets/edit_button.png");let editIndentedTexture = new Texture("assets/edit_button_pressed.png");let fishTexture = new Texture("assets/img.png");let upArrowTexture = new Texture("assets/up-arrow.png");let upInvertedTexture = new Texture("assets/up-arrow-invert.png");let downArrowTexture =  new Texture("assets/down-arrow.png");let downInvertedTexture = new Texture("assets/down-arrow-invert.png");// Skinslet whiteSkin = new Skin({ fill:"white", texture: fishTexture, fill: "white", width: 1000, height: 1000, });let blankSkin = new Skin({ fill:"white", fill: "white", aspect: "fill", width: 1000, height: 1000, });let blueSkin = new Skin({ fill: "#14a5ff" });
let orangeSkin = new Skin({ fill: "#FF9105" });
let editButtonSkin = new Skin({    width: 350, height: 100,      texture: editButtonTexture,      fill: "white",      aspect: "fit"});let editIndentedSkin = new Skin({    width: 350, height: 100,      texture: editIndentedTexture,      fill: "white",      aspect: "fit"});let upArrowSkin = new Skin({	  width: 100, height: 100,      texture: upArrowTexture,      fill: "white",      aspect: "fit"});let upInvertedSkin = new Skin({	  width: 100, height: 100,      texture: upInvertedTexture,      fill: "white",      aspect: "fit"});let downArrowSkin = new Skin({	  width: 100, height: 100,      texture: downArrowTexture,      fill: "white",      aspect: "fit"});let downInvertedSkin = new Skin({	  width: 100, height: 100,      texture: downInvertedTexture,      fill: "white",      aspect: "fit"});//Templateslet editButton = Container.template($ => ({  left: $.left,  top: $.top, width:$.width, height:$.height, skin: editButtonSkin,  active: true,  contents: [    new Label({      left: 0, right:0, top: 0, bottom: 0,      style: buttonStyle,    })  ],   behavior: Behavior({    onTouchEnded(button){          button.skin = editButtonSkin;         application.distribute("onScheduleEditOpen");       },    onTouchBegan(button) {          button.skin = editIndentedSkin;  }  })}));let Time1Label = Label.template($ => ({ left: 10, bottom: 50, width: 100, string : time_1 + " " + timeUnit1, style : valueStyle,    Behavior: class extends Behavior {        onIncrementTime1Label(Time1Label) {          if (time_1 == 12) {              time_1 = 1;              if (timeUnit1 == "AM") {                  timeUnit1 = "PM";              }              else {                  timeUnit1 = "AM";              }          }          else {            time_1 ++;        }        Time1Label.string = time_1 + " " + timeUnit1;        application.distribute("onIncTime1");    }        onDecrementTime1Label(Time1Label) {          if (time_1 == 1) {              time_1 = 12;              if (timeUnit1 == "AM") {                  timeUnit1 = "PM";              }              else {                  timeUnit1 = "AM";              }          }          else {            time_1 --;        }          Time1Label.string = time_1+ " " + timeUnit1;          application.distribute("onDecTime1");    }    }}))let Food1Label = Label.template($ => ({ left: 0, bottom: 50, width: 100, string : food_1 + "g", style : valueStyle,    Behavior: class extends Behavior {        onIncrementFood1Label(food1Label) {          food_1 ++;          food1Label.string = food_1 + "g";          application.distribute("onIncFood1");    }        onDecrementFood1Label(food1Label) {          if (food_1 == 0) {          	food_1 = 0          }          else {          	food_1 --;          }          food1Label.string = food_1+ "g";          application.distribute("onDecFood1");    }    }}))let Time2Label = Label.template($ => ({ left: 20, bottom: 50, width: 100, string : time_2+ " " + timeUnit2, style : valueStyle,    Behavior: class extends Behavior {        onIncrementTime2Label(Time2Label) {          if (time_2 == 12) {              time_2 = 1;              if (timeUnit2 == "AM") {                  timeUnit2 = "PM";              }              else {                  timeUnit2 = "AM";              }          }          else {            time_2 ++;        }        Time2Label.string = time_2 + " " + timeUnit2;        application.distribute("onIncTime2");    }        onDecrementTime2Label(Time2Label) {          if (time_2 == 1) {              time_2 = 12;              if (timeUnit2 == "AM") {                  timeUnit2 = "PM";              }              else {                  timeUnit2 = "AM";              }          }          else {            time_2 --;        }          Time2Label.string = time_2 + " " + timeUnit2;          application.distribute("onDecTime2");    }    }}))let Food2Label = Label.template($ => ({ left: 0, bottom: 50, width: 100, string : food_2 + "g", style : valueStyle,    Behavior: class extends Behavior {        onIncrementFood2Label(food2Label) {          food_2 ++;          food2Label.string = food_2 + "g";          application.distribute("onIncFood2");    }        onDecrementFood2Label(food2Label) {          if (food_2 == 0) {          	food_2 = 0          }          else {          	food_2 --;          }          food2Label.string = food_2 + "g";          application.distribute("onDecFood2");    }    }}))let Time3Label = Label.template($ => ({ left: 20, bottom: 50, width: 100, string : time_3 + " " + timeUnit3, style : valueStyle,    Behavior: class extends Behavior {        onIncrementTime3Label(Time3Label) {          if (time_3 == 12) {          	  time_3 = 1;          	  if (timeUnit3 == "AM") {          	  	  timeUnit3 = "PM";          	  }          	  else {          	  	  timeUnit3 = "AM";          	  }          }          else {	          time_3 ++;	      }	      Time3Label.string = time_3 + " " + timeUnit3;	      application.distribute("onIncTime3");    }        onDecrementTime3Label(Time3Label) {          if (time_3 == 1) {          	  time_3 = 12;          	  if (timeUnit3 == "AM") {          	  	  timeUnit3 = "PM";          	  }          	  else {          	  	  timeUnit3 = "AM";          	  }          }          else {	          time_3 --;	      }          Time3Label.string = time_3 + " " + timeUnit3;          application.distribute("onDecTime3");    }    }}))let Food3Label = Label.template($ => ({ left: 0, bottom: 50, width: 100, string : food_3 + "g", style : valueStyle,    Behavior: class extends Behavior {        onIncrementFood3Label(food3Label) {          food_3 ++;          food3Label.string = food_3 + "g";          application.distribute("onIncFood3");    }        onDecrementFood3Label(food3Label) {          if (food_3 == 0) {          	food_3 = 0          }          else {          	food_3 --;          }          food3Label.string = food_3 + "g";          application.distribute("onDecFood3");    }    }}))let savingScreen = Column.template($ => ({	top: 150, width: 300, height: 150,	active: true,	skin: orangeSkin,	contents: [		new Label({top:30, string: 'Changes Saved!', style: titleStyle }),		new Label({ top: 30, string: 'Tap to dismiss.', style: buttonStyle }),  	],  	Behavior: class extends Behavior {  	   	onTouchEnded(savingScreen) {			application.remove(application.last);			application.distribute("onSaved");		}  	}}))let upButton = Container.template($ => ({  width:60, height:60,  active: true,  skin: upArrowSkin,  Behavior: class extends Behavior {  	onCreate(button, data) {  		this.command = data.command;  	}  	onTouchEnded(button){  	   	button.skin = upArrowSkin;   		application.distribute(this.command);     }   	onTouchBegan(button) {  	   	button.skin = upInvertedSkin;	}  }}))let downButton = Container.template($ => ({  width:60, height:60,  active: true,  skin: downArrowSkin,  Behavior: class extends Behavior {  	onCreate(button, data) {  		this.command = data.command;  	}  	onTouchEnded(button){  	   	button.skin = downArrowSkin;  	   	application.distribute(this.command);     }   	onTouchBegan(button) {  	   	button.skin = downInvertedSkin;	}  }}))// Styleslet titleStyle = new Style( { font: "22px Marker Felt", color:"white" } );let buttonStyle = new Style({font: '18px Roboto', color: 'white'});let specialStyle = new Style({font: 'bold 40px Roboto', color: 'green'});let valueStyle = new Style({font: '35px Roboto', color: 'black'});let bigValueStyle = new Style({font: '75px Roboto', color: 'black'});let textStyle = new Style({font: '18px Roboto', color: 'black'});let boldStyle = new Style({font: 'bold 16px Roboto', color: 'black'});export var schedule_edit_screen_template = Column.template($ => ({   left: 0, right: 0, top: 0, bottom: 0, skin: whiteSkin,   contents: [       new Container({			left:0, right:0, height: 40, skin: blueSkin,			contents: [				new Container({					left: 0, right: 230, top: 0, bottom: 0, skin: blueSkin, active: true,					contents: [						new Label({ string: 'Cancel', style: buttonStyle,							behavior: Behavior ({								onSaved: function(content, id, x, y, ticks) {									content.string = '';								}							})						 })					],					behavior: Behavior ({
						onSaved: function(content, id, x, y, ticks) {							content.add(new Picture({left:-80, height: 30, url: "assets/back_button.png"}));									},						onTouchEnded: function(content, id, x, y, ticks) {							if (saved == 1) {								oldtime_1 = time_1;								oldtime_2 = time_2;								oldtime_3 = time_3;								oldfood_1 = food_1;								oldfood_2 = food_2;								oldfood_3 = food_3;								oldtimeUnit1 = timeUnit1;								oldtimeUnit2 = timeUnit2;								oldtimeUnit3 = timeUnit3;								saved = 0;							}							else {								time_1 = oldtime_1;								time_2 = oldtime_2;								time_3 = oldtime_3;								food_1 = oldfood_1;								food_2 = oldfood_2;								food_3 = oldfood_3;								timeUnit1 = oldtimeUnit1;								timeUnit2 = oldtimeUnit2;								timeUnit3 = oldtimeUnit3;							}							application.distribute("onBackSchedule");						},											})				}),				new Label({ horizontal: 'center',  string: 'Edit Feed Schedule', style: titleStyle }),				new Container({					left: 240, right: 0, top: 0, bottom: 0, skin: blueSkin, active: true,					contents: [						new Label({ string: 'Save', style: buttonStyle })					],					behavior: Behavior ({						onTouchEnded: function(content, id, x, y, ticks) {							application.add(new savingScreen());							application.distribute("onScheduleSave");							saved = 1;						}					})				}),			]		}),		new Container({			left:0, right:0, height: 30, skin: whiteSkin,			contents: [				new Label({ top: 5, string: 'Select time and food amount for time slot 1', style: boldStyle, skin: whiteSkin }),			]		}),		new Line( {			top: 10,			contents: [				new Time1Label(),				new Column({					left: 17,					contents: [						new upButton({command: "onIncrementTime1Label"}),						new downButton({command: "onDecrementTime1Label"})					]   				}),				new Food1Label(),				new Column({					left: 0,					contents: [						new upButton({command: "onIncrementFood1Label"}),						new downButton({command: "onDecrementFood1Label"})					]   				}),					   			]		   		}),		new Container({			top:-10, left:0, right:0, height: 30, skin: whiteSkin,			contents: [				new Label({ top: 5, string: 'Select time and food amount for time slot 2', style: boldStyle, skin: whiteSkin }),			]		}),		new Line( {			top: 10,			contents: [				new Time2Label(),				new Column({					left: 15,					contents: [						new upButton({command: "onIncrementTime2Label"}),						new downButton({command: "onDecrementTime2Label"})					]   				}),				new Food2Label(),				new Column({					left: 0,					contents: [						new upButton({command: "onIncrementFood2Label"}),						new downButton({command: "onDecrementFood2Label"})					]   				}),			   			]		   		}),		new Container({			top:-10, left:-10, right:0, height: 30, skin: whiteSkin,			contents: [				new Label({ top: 5, string: 'Select time and food amount for time slot 3', style: boldStyle, skin: whiteSkin }),			]		}),		new Line( {			top: 10,			contents: [				new Time3Label(),				new Column({					left: 15,					contents: [						new upButton({command: "onIncrementTime3Label"}),						new downButton({command: "onDecrementTime3Label"})					]   				}),				new Food3Label(),				new Column({					left:0,					contents: [						new upButton({command: "onIncrementFood3Label"}),						new downButton({command: "onDecrementFood3Label"})					]   				}),					   			]		   		}),     ]}));