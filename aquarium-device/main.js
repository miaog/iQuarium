// Aquarium Device App// Written for CS160 Fall 2016// Team 13: Magnetic Magikarpslet Pins = require("pins");// State variables
let deviceURL = "";var filterStatus = "No";var foodStatus = "No";var loVal = 72;var hiVal = 80;var actVal = 75.9;var tempUnit = "F";

var displayLoVal = loVal;
var displayHiVal = hiVal;
var displayActVal= actVal;
var oldLoVal = loVal;var oldHiVal = hiVal;var oldActVal = actVal;var oldTempUnit = tempUnit;

var feedAmount = 5;
var displayFeedAmount;
var loValpH = 6.7;
var hiValpH = 7.3;
var actValpH = 7.0;

//Textures
let fishTexture = new Texture("assets/img.png");
// Skinslet whiteSkin = new Skin({ fill:"#ffd3ab" });let blueSkin = new Skin({ fill: "#14a5ff" });// Styleslet titleStyle = new Style( { font: "bold 24px Porky's", color:"white" } );let buttonStyle = new Style({font: '16px Roboto', color: 'white'});let textStyle = new Style({font: '16px Roboto', color: 'black'});
let textStyle2 = new Style({font: '16px Roboto', color: 'black'});// State labelsvar filterLabel = new Label({ left:0, right:0, top: 10, height:30,								string:"Filter clean: " + filterStatus,								style: textStyle, 								behavior: Behavior ({									onUpdate: function(content, id, x, y, ticks) {										content.string = "Filter clean: " + filterStatus;									}								})							});var foodLabel = new Label({ left:0, right:0, top: 2, height:30,								string:"Fish fed: " + foodStatus,								style: textStyle2, 								behavior: Behavior ({									onUpdate: function(content, id, x, y, ticks) {
										let amountFed = "";
										if (foodStatus === "Yes") {
											amountFed = ". Amount last fed: " + displayFeedAmount + "g";										}																			content.string = "Fish fed: " + foodStatus + amountFed;									}								})							});var tempRangeLabel = new Label({ left:0, right:0, top: 2, height:30,								string:"Low: " + loVal + " " + tempUnit + "  High: " + hiVal + " " + tempUnit,								style: textStyle, 								behavior: Behavior ({									onUpdate: function(content, id, x, y, ticks) {										content.string = "Low: " + displayLoVal + " " + tempUnit + "  High: " + displayHiVal + " " + tempUnit;									}								})							});var currentTempLabel = new Label({ left:0, right:0, top: 2, height:30,								string:"Temperature set to: " + actVal.toFixed(1) + " " + tempUnit,								style: textStyle, 								behavior: Behavior ({									onUpdate: function(content, id, x, y, ticks) {										content.string = "Temperature set to: " + displayActVal.toFixed(1) + " " + tempUnit;									}								})							});
							
							var pHRangeLabel = new Label({ left:0, right:0, top: 2, height:30,								string:"Low: " + loValpH +  "  High: " + hiValpH,								style: textStyle, 								behavior: Behavior ({									onUpdate: function(content, id, x, y, ticks) {										content.string = "Low: " + loValpH +  "  High: " + hiValpH,;									}								})							});var currentpHLabel = new Label({ left:0, right:0, top: 2, height:30,								string:"pH set to: " + actValpH.toFixed(1),								style: textStyle, 								behavior: Behavior ({									onUpdate: function(content, id, x, y, ticks) {										content.string = "pH set to: " + actValpH.toFixed(1);									}								})							});// HANDLERS// Data updatesHandler.bind("/getTankData", Behavior({    onInvoke: function(handler, message){        message.responseText = JSON.stringify( { count: filterStatus } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/changeFilter", Behavior({    onInvoke: function(handler, message){    	filterStatus = "Yes";        message.responseText = JSON.stringify( { count: filterStatus } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/getFoodData", Behavior({    onInvoke: function(handler, message){        message.responseText = JSON.stringify( { count: foodStatus } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/feed", Behavior({    onInvoke: function(handler, message){    	foodStatus = "Yes";
    	displayFeedAmount = feedAmount;        message.responseText = JSON.stringify( { count: foodStatus } );        message.status = 200;        application.distribute("onUpdate");    }}));// Temperature handlersHandler.bind("/getTempData", Behavior({    onInvoke: function(handler, message){        message.responseText = JSON.stringify( { lo: loVal, hi: hiVal, act: actVal } );        message.status = 200;        application.distribute("onUpdate");    }}));
Handler.bind("/incFeed", Behavior({    onInvoke: function(handler, message){    	feedAmount += 1;
        message.responseText = JSON.stringify( { count: feedAmount } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/decFeed", Behavior({    onInvoke: function(handler, message){    	feedAmount -= 1;
        message.responseText = JSON.stringify( { count: feedAmount } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/incLo", Behavior({    onInvoke: function(handler, message){    	loVal += 1;        message.responseText = JSON.stringify( { count: loVal } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/decLo", Behavior({    onInvoke: function(handler, message){    	loVal -= 1;        message.responseText = JSON.stringify( { count: loVal } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/incHi", Behavior({    onInvoke: function(handler, message){    	hiVal += 1;        message.responseText = JSON.stringify( { count: hiVal } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/decHi", Behavior({    onInvoke: function(handler, message){    	hiVal -= 1;        message.responseText = JSON.stringify( { count: hiVal } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/incAct", Behavior({    onInvoke: function(handler, message){    	actVal += 0.1;        message.responseText = JSON.stringify( { count: actVal } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/decAct", Behavior({    onInvoke: function(handler, message){    	actVal -= 0.1;        message.responseText = JSON.stringify( { count: actVal } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/switchUnits", Behavior({    onInvoke: function(handler, message){    	if (tempUnit == "F") { tempUnit = "C"; }    	else { tempUnit = "F"; }        message.responseText = JSON.stringify( { count: tempUnit } );        message.status = 200;        application.distribute("onUpdate");    }}));// Temperature save and cancelHandler.bind("/dataSave", Behavior({    onInvoke: function(handler, message){    	oldLoVal = loVal;    	oldHiVal = hiVal;    	oldActVal = actVal    	oldTempUnit = tempUnit;
    	displayLoVal = loVal;
    	displayHiVal = hiVal;
    	displayActVal = actVal;        message.responseText = JSON.stringify( { count: actVal } );        message.status = 200;
        application.distribute("onUpdate");            }}));Handler.bind("/dataCancel", Behavior({    onInvoke: function(handler, message){    	loVal = oldLoVal;    	hiVal = oldHiVal;    	actVal = oldActVal;    	tempUnit = oldTempUnit;        message.responseText = JSON.stringify( { count: actVal } );        message.status = 200;        application.distribute("onUpdate");    }}));// Interface designlet updateButton = new Container({	name: 'updateButton',	left: 80, right: 80, height: 40, top: 5, skin: blueSkin,	contents: [		new Label({ string: 'Update Device Data', style: buttonStyle })	],	active: true,	behavior: Behavior ({		onTouchBegan: function(content, id, x, y, ticks) {			Pins.invoke("/filterSensor/read", function(result) {			   if (result) {			   	  filterStatus = "Yes";
			      if (deviceURL != "") new Message(deviceURL + "filterManuallyGood").invoke(Message.JSON).then(json => {});			   	  			      trace("Device detects a clean filter.\n");			   } else {			      filterStatus = "No";
			      if (deviceURL != "") new Message(deviceURL + "filterManuallyBad").invoke(Message.JSON).then(json => {});			      trace("Device detects an unclean filter.\n");			   }			});			Pins.invoke("/foodSensor/read", function(result) {			   if (result) {			   	  foodStatus = "Yes";
			      if (deviceURL != "") new Message(deviceURL + "foodManuallyGood").invoke(Message.JSON).then(json => {});			   	  			  			      trace("Device detects fish were recently fed.\n");			   } else {			      foodStatus = "No";
			      if (deviceURL != "") new Message(deviceURL + "foodManuallyBad").invoke(Message.JSON).then(json => {});			   	  			  			      			      trace("Device detects that the fish are hungry.\n");			   }			});		},		onTouchEnded: function(content, id, x, y, ticks) {			application.distribute("onUpdate");		}	})});

// Device screen layoutlet mainScreen = new Column({	left: 0, right: 0, top: 0, bottom: 0, skin: whiteSkin,	contents: [		new Label({ left:0, right:0, top: 10, height:40, skin: blueSkin, string:"iAquarium Device Monitor", style: titleStyle}),
		filterLabel,		foodLabel,		tempRangeLabel,		currentTempLabel,		updateButton,	]});

Handler.bind("/discover", Behavior({    onInvoke: function(handler, message){        deviceURL = JSON.parse(message.requestText).url;    }}));Handler.bind("/forget", Behavior({    onInvoke: function(handler, message){        deviceURL = "";    }}));// Device behaviorclass DeviceBehavior extends Behavior {    onLaunch(application) {		Pins.configure({			filterSensor: {		    	require: "Digital",		    	pins: {		    		power: {pin: 56, voltage: 3.3, type: "Power"},		         	ground: {pin: 57, type: "Ground"},		         	digital: {pin: 58, direction: "input"}		    	}		    },		    foodSensor: {		    	require: "Digital",		    	pins: {		    		power: {pin: 59, voltage: 3.3, type: "Power"},		         	ground: {pin: 60, type: "Ground"},		         	digital: {pin: 61, direction: "input"}		    	}		    }		},		function(success) {			if (!success) trace("Failed to configure\n");		});		application.shared = true;
		application.discover("aquarium.companion.app");    }    onQuit(application) {        application.shared = false;
        application.forget("aquarium.companion.app");    }}application.behavior = new DeviceBehavior();application.add(mainScreen);